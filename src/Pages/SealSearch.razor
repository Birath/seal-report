@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using System.Text.Json
@using System.Threading.Tasks
@using Microsoft.Fast.Components.FluentUI
@using TitleReport.Components.ProfileOverview
@using TitleReport.Data
@inject HttpClient Http
@inject IBlazorDbFactory DbFactory
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;

@page "/"
<style>

</style>
<PageTitle>Seal Report</PageTitle>

<div class="container-fluid">
	<div class="row gx-1 justify-content-center">
		<div class="col-12 col-sm-6 d-flex align-self-center">
			<FluentTextField class="flex-fill" @bind-Value="_bungieName" Placeholder="Bungie Name" />
			<FluentButton class="ms-1" Appearance="@Appearance.Accent" @onclick="OnSearch">Search</FluentButton>
		</div>
	</div>
</div>
@if (_isLoadingTitles)
{
	<div class="d-flex w-100 justify-content-center mt-2">
		<FluentProgressRing class="align-self-center" />
	</div>
}

@if (_hasLoadedProfile && !_isLoadingTitles && ActiveProfile != null) 
{
	<div class="container-xl mt-2">
		<div class="row justify-content-center">
			<div class="col-12 d-flex justify-content-center">
				<ProfileOverview EmblemUrl="@(ActiveProfile.EmblemUrl)" UserName="@(ActiveProfile.UserName)" Seals="@(ActiveProfile.Seals)" EquippedSeal="@(ActiveProfile.EquipedSeal)" />
			</div>
		</div>
		<div class="row justify-content-center mb-2">
			<div class="col-12 d-flex justify-content-center">
				<FluentToolbar>
					@foreach (var property in Enum.GetValues<FilterProperty>().Skip(1))
				   {
						<FluentCheckbox Value="@(IsPropertyActive(property))" @onchange="@((ChangeEventArgs __e) => ToggleFilterProperty(property))">@property</FluentCheckbox>
				   }
				</FluentToolbar>
			</div>
		</div>
		<div class="row g-2">

			@foreach (var seal in _seals)
			{
				<div class="col-12 col-md-6 col-lg-4" style="@(Filter(seal) ? "" : "display: none")">

					<FluentCard class="p-2">
						<div class="row">
							<div class="col-7">
								<div class="position-relative d-inline" style="color: @(seal.IsGildedCurrentSeason ? "#a68455" : seal.IsComplete ? "#732881" : "var(--neutral-foreground-hover)")">
									<h3 class="d-inline">
										@seal.Title  @if (seal.GildedCount > 0)
										{
											<span class="destiny-symbol"> </span>
										}
									</h3>
									@if (seal.GildedCount > 0)
									{
										<p class="position-absolute ms-1 top-0 start-100 translate-middle " style="color: @(seal.IsGildedCurrentSeason ? "#a68455" : "#732881")">@seal.GildedCount</p>
									}
								</div>
								<p>@seal.Description</p>
								<div class="d-flex">
									@if (seal.IsLegacy)
									{
										<FluentBadge Appearance="Appearance.Accent">Legacy</FluentBadge>
									}
								</div>
							</div>
							<div class="col-5">
								<img src="@seal.Icon" class="float-end" alt="Icon for @seal.Title" style="@(seal.IsComplete ? "" : "filter: grayscale(1)"); margin-right: -8px" />
							</div>
						</div>
						
						<div class="row pt-2">
							<div class="col-12">
								<FluentAccordion>
									<FluentAccordionItem>
										<div slot="start">Triumphs @seal.RequiredTriumphs.Count(t => t.IsComplete) / @seal.RequiredTriumphs.Count()</div>
										@foreach (var triumph in seal.RequiredTriumphs)
										{
											<p style="@(triumph.IsComplete ? "color: green" : "color: red")">@triumph.Name - @triumph.CompletionPercentage</p>
										}
									</FluentAccordionItem>
								</FluentAccordion>
							</div>
						</div>
					</FluentCard>
				</div>
			}
		</div>
	</div>

}

@code {
	private string? _bungieName = "";
	private readonly List<Seal> _seals = new List<Seal>();
	private bool _isLoadingTitles = false;
	private bool _hasLoadedProfile = false;

	public ProfileOverviewData? ActiveProfile { get; private set; } = new ProfileOverviewData("TEST", "https://www.bungie.net/common/destiny2_content/icons/c612ec23a7f3b57042cb988788ef37a8.jpg", new Seal("TEST", "TEST", "TEST DESCRIPTION", FilterProperty.Complete, "ICON", Array.Empty<Triumph>()));

	private FilterProperty _activeFilter = FilterProperty.Complete;

	public IndexedDbManager? DataBaseManager { get; private set; }


	protected override async Task OnInitializedAsync()
	{
		DataBaseManager = await DbFactory.GetDbManager(Constants.DefinitionDataBaseName);
	}

	public async Task OnSearch()
	{
		if (string.IsNullOrEmpty(_bungieName) || !_bungieName.Contains('#'))
		{
			await Console.Error.WriteLineAsync($"Invalid bungie name: {_bungieName}");
			return;
		}

		if (!BungieName.TryParse(_bungieName, out var searchData))
		{
			await Console.Error.WriteLineAsync($"Invalid bungie name: {_bungieName}");
			return;
		}

		_isLoadingTitles = true;
		_seals.Clear();
		try
		{
			var userInfo = await SearchGuardianAsync(searchData!);
			if (userInfo is null)
			{
				Console.Error.WriteLine($"Could not find user data for {_bungieName}");
				return;
			}

			var profile = await GetDestinyProfile(userInfo);

			if (profile is null)
			{
				Console.Error.WriteLine($"Failed to get profile info for {_bungieName}");
				return;
			}

			if (profile.profileRecords?.data is null)
			{
				Console.Error.WriteLine($"Failed to get profile records for {_bungieName}");
				return;
			}

			if (profile.characters?.data is null)
			{
				await Console.Error.WriteLineAsync($"Failed to get characters for {_bungieName}");
				return;
			}

			ActiveProfile = await GetUserProfileOverview(userInfo.displayName, profile.characters.data.Values, profile.profileRecords.data);

			var userSeals = await GetUserSeals(profile.profileRecords.data);
			_seals.AddRange(userSeals);
			ActiveProfile.Seals.Clear();
			ActiveProfile.Seals.AddRange(_seals
				.Where(seal => seal.ActiveProperties.HasFlag(FilterProperty.Current))
			);
			_hasLoadedProfile = true;
		}
		finally
		{
			_isLoadingTitles = false;
		}
	}

	private bool Filter(Seal seal)
	{
		return (seal.ActiveProperties & _activeFilter) == _activeFilter;
	}

	private void ToggleFilterProperty(FilterProperty property)
	{
		_activeFilter ^= property;
	}

	private bool IsPropertyActive(FilterProperty property) => _activeFilter.HasFlag(property);

	public class BungieName
	{
		public string displayName { get; set; }

		public short displayNameCode { get; set; }

		private BungieName(string name, short code)
		{
			displayName = name;
			displayNameCode = code;
		}

		public static bool TryParse(string name, out BungieName? bungieName)
		{
			bungieName = null;
			var pieces = name.Split('#');
			if (pieces.Length != 2) return false;
			if (short.TryParse(pieces[1], out short parsedCode))
			{
				bungieName = new BungieName(pieces[0], parsedCode);
				return true;
			}
			return false;
		}
	}

	
}
