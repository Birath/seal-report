@using System.Text
@using System.Runtime.InteropServices
@using System.Text.Json
@using BungieSharper.Entities
@using BungieSharper.Entities.Destiny.Components.Records
@using BungieSharper.Entities.Destiny.Config
@using BungieSharper.Entities.Destiny.Definitions.Presentation
@using BungieSharper.Entities.Destiny.Definitions.Records
@using BungieSharper.Entities.Exceptions
@inject HttpClient Http
@inject IBlazorDbFactory DbFactory
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;

@if (_isLoaded)
{
    @ChildContent
}
else
{
	<FluentDesignSystemProvider @ref=fdsp BaseLayerLuminance=@baseLayerLuminance class="vh-100">

		<div class="d-flex position-absolute top-50 start-50 translate-middle w-100 justify-content-center">
			<FluentProgressRing />
			<h3 class="ms-3">
				Getting Destiny Manifest...
			</h3>
		</div>
	</FluentDesignSystemProvider>
}

@code {
	FluentDesignSystemProvider fdsp = new();
	private bool _isLoaded = false;
	float baseLayerLuminance = 0.2f;

	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (!Http.DefaultRequestHeaders.Contains("X-API-Key"))
		{
			Http.DefaultRequestHeaders.Add("X-API-Key", Constants.BungieApiKey);
		}

		var dataBaseManager = await DbFactory.GetDbManager(Constants.DefinitionDataBaseName);
		var response = await Http.GetFromJsonAsync<ApiResponse<DestinyManifest>>($"{Constants.BungieApiEndpoint}/Destiny2/Manifest/");
		
		if (response is null || response.ErrorCode != PlatformErrorCodes.Success)
		{
			await Console.Error.WriteLineAsync("Failed to get Destiny Manifest");
			return;
		}
		
		var manifest = response.Response;
		if (manifest is null) return;

		await Console.Out.WriteLineAsync($"Got destiny manifest: {manifest.Version}");

		var storedManifestVersion = await LocalStorage.GetItemAsync<string>("manifestVersion");

		if (storedManifestVersion != manifest.Version)
		{
			var recordPath = manifest.JsonWorldComponentContentPaths["en"]["DestinyRecordDefinition"];
			var presentationPath = manifest.JsonWorldComponentContentPaths["en"]["DestinyPresentationNodeDefinition"];

			// Create new client due to CORS error when using the injected one. (Maybe due to API key header?)
			using var client = new HttpClient();
			var bulkAddTasks = new List<Task<BlazorDbEvent>>();
				
			var records = await client.GetFromJsonAsync<Dictionary<uint, DestinyRecordDefinition>>($"{Constants.BungieManifestEndpoint}{recordPath}");
			if (records != null && records.Any())
			{
				await dataBaseManager.ClearTableAsync(Constants.RecordStoreName);

				bulkAddTasks.Add( dataBaseManager.BulkAddRecordAsync(Constants.RecordStoreName, records.Values));
			}

			var presentationNodes = await client.GetFromJsonAsync<Dictionary<uint, DestinyPresentationNodeDefinition>>($"{Constants.BungieManifestEndpoint}{presentationPath}");

			if (presentationNodes != null && presentationNodes.Any())
			{
				await dataBaseManager.ClearTableAsync(Constants.PresentationNodesStoreName);

				bulkAddTasks.Add(dataBaseManager.BulkAddRecordAsync(Constants.PresentationNodesStoreName, presentationNodes.Values));
			}

			foreach (var transactionResult in await Task.WhenAll(bulkAddTasks))
			{
				if (transactionResult.Failed)
				{
					Console.Error.WriteLine($"Bulk add {transactionResult.Transaction} failed : {transactionResult.Message}");
				}
			}
			await LocalStorage.SetItemAsync("manifestVersion", manifest.Version);

		}

		_isLoaded = true;
	}
}
